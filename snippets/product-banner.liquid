{%- liquid
  assign _product = nil
  if product
    assign _product = product
  elsif handle
    assign _product = all_products[handle]
  endif
-%}
{%- unless _product -%}
  <div class="bp bp--service">–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ{% if handle %} (handle: {{ handle | escape }}){% endif %}</div>
  {%- break -%}
{%- endunless -%}

{%- liquid
  assign color_index = 0
  for opt in _product.options_with_values
    assign down = opt.name | downcase
    if down == 'color' or down == 'colour' or down == '–∫–æ–ª—ñ—Ä' or down == '—Ü–≤–µ—Ç' or down == 'kolor'
      assign color_index = forloop.index
      break
    endif
  endfor
  

  assign has_color = color_index > 0
  assign map_key = 'option' | append: color_index
  if has_color
    assign color_values = _product.variants | map: map_key | uniq
  endif
-%}  

  capture price_html
    {%- if _product.price -%}
      {%- assign current_price = _product.price -%}
      {%- assign compare_price = _product.compare_at_price -%}
      <div class="bp-price">
        {%- if compare_price and compare_price > current_price -%}
          <span class="bp-price__now">{{ current_price | money }}</span>
          <span class="bp-price__old"><s>{{ compare_price | money }}</s></span>
        {%- else -%}
          <span class="bp-price__now">{{ current_price | money }}</span>
        {%- endif -%}
      </div>
    {%- endif -%}
  endcapture

  assign main_image = _product.featured_image | default: _product.images.first
-%}

<div class="bp bp--figma" data-product-id="{{ _product.id }}">
  <!-- LEFT: vertical thumbs -->
  <div class="bp-left">
    <div class="bp-thumbs">
      {%- assign shown = 0 -%}
      {%- for img in _product.images -%}
        {%- if img == blank -%}{% continue %}{%- endif -%}
        <button type="button" class="bp-thumb" data-image="{{ img | image_url: width: 1000 }}" aria-label="thumb {{ forloop.index }}">
          {{ img | image_url: width: 120 | image_tag: alt: img.alt | default: _product.title, class: 'bp-thumb__img', loading: 'lazy' }}
        </button>
        {%- assign shown = shown | plus: 1 -%}
        {%- if shown >= 5 -%}{% break %}{%- endif -%}
      {%- endfor -%}
    </div>
  </div>

  <!-- CENTER: big image with badge -->
  <div class="bp-center">
    <div class="bp-media">
      {%- if main_image -%}
        {{ main_image | image_url: width: 1200 | image_tag: alt: main_image.alt | default: _product.title, class: 'bp-media__img' }}
      {%- else -%}
        <div class="bp-media__placeholder">üì¶</div>
      {%- endif -%}
      <span class="bp-badge"><i aria-hidden="true">‚òÖ</i> Highly Rated</span>
    </div>
  </div>

  <!-- RIGHT: title, price, colors, button, description -->
  <div class="bp-right">
    <h1 class="bp-title">{{ _product.title | escape }}</h1>
    {{- price_html -}}

    {%- if has_color -%}
      <div class="bp-swatch-block">
        <div class="bp-swatch__label">{{ 'product.banner.select_color' | t | default: '–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä' | escape }}</div>
        <div class="bp-swatch__list">
          {%- assign zero_seen = false -%}
          {%- assign rendered = 0 -%}
          {%- for color in color_values -%}
            {%- if color == blank -%}{% continue %}{%- endif -%}
            {%- assign variants_for = _product.variants | where: map_key, color -%}
            {%- assign v = variants_for.first -%}
            {%- if v == nil -%}{% continue %}{%- endif -%}
            {%- assign qty = v.inventory_quantity -%}
            {%- assign available = v.available -%}
            {%- if available == false or qty == 0 -%}{% assign zero_seen = true %}{% endif -%}

            <button type="button"
                    class="bp-tile"
                    role="option"
                    aria-label="{{ color | escape }}"
                    data-variant-id="{{ v.id }}"
                    data-qty="{{ qty | default: 0 }}"
                    data-available="{{ available }}"
                    data-image="{{ v.image | default: main_image | image_url: width: 1200 }}"
                    data-color="{{ color | escape }}">
              <span class="bp-tile__img-wrap">
                {%- assign tile_img = v.image | default: main_image -%}
                {{ tile_img | image_url: width: 220 | image_tag: alt: color, class: 'bp-tile__img', loading: 'lazy' }}
              </span>
              <span class="bp-tile__name">{{ color | escape }}</span>
            </button>

            {%- assign rendered = rendered | plus: 1 -%}
            {%- if forloop.index >= 3 -%}{% break %}{%- endif -%}
          {%- endfor -%}
        </div>
        <div class="bp-stock" aria-live="polite"></div>
      </div>
    {%- else -%}
      <div class="bp-note">–î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ–º–∞—î –æ–ø—Ü—ñ—ó –∫–æ–ª—å–æ—Ä—É.</div>
    {%- endif -%}

    {%- assign first_variant = _product.variants.first -%}
    <a class="bp-btn bp-btn--primary" data-cart-link href="/cart/add?id={{ first_variant.id }}&quantity=1">
      Add To Bag
    </a>

    {%- if _product.description != blank -%}
      <p class="bp-desc">
        {{ _product.description | strip_html | truncate: 220 }}
      </p>
    {%- endif -%}
  </div>
</div>

<script>
(function(){
  var root = document.currentScript.previousElementSibling;
  if(!root || !root.classList.contains('bp')) return;

  var big = root.querySelector('.bp-media__img');
  var cartLink = root.querySelector('[data-cart-link]');
  var stock = root.querySelector('.bp-stock');
  var tiles = [].slice.call(root.querySelectorAll('.bp-tile'));
  var thumbs = [].slice.call(root.querySelectorAll('.bp-thumb'));

  thumbs.forEach(function(t){
    t.addEventListener('click', function(){
      var url = t.getAttribute('data-image');
      if (big && url) big.src = url;
    });
  });

  function selectTile(btn){
    tiles.forEach(function(b){ b.classList.remove('is-selected'); });
    btn.classList.add('is-selected');
  }
  function updateImage(btn){
    var url = btn.getAttribute('data-image');
    if (big && url) big.src = url;
  }
  function updateCart(btn){
    var vid = btn.getAttribute('data-variant-id');
    if (vid && cartLink) cartLink.href = '/cart/add?id=' + encodeURIComponent(vid) + '&quantity=1';
  }
  function updateStock(btn, forceZero){
    var qty = parseInt(btn.getAttribute('data-qty') || '0', 10);
    var available = (btn.getAttribute('data-available') === 'true');
    if (forceZero) { qty = 0; available = false; }
    if (!available || qty <= 0){
      stock.textContent = "{{ 'product.banner.not_available' | t | default: '–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ' }}";
    } else {
      stock.textContent = "{{ 'product.banner.available_with_count' | t: count: '__COUNT__' | default: '–î–æ—Å—Ç—É–ø–Ω–æ: __COUNT__' }}".replace('__COUNT__', qty);
    }
  }

  // If no true zero among rendered, simulate last tile as zero (UX branch)
  var hasZero = tiles.some(function(b){
    return (b.getAttribute('data-available') === 'false') || (parseInt(b.getAttribute('data-qty')||'0',10) <= 0);
  });
  var simulateZeroTile = !hasZero && tiles.length ? tiles[tiles.length-1] : null;

  tiles.forEach(function(btn){
    btn.addEventListener('click', function(){
      selectTile(btn);
      updateImage(btn);
      updateCart(btn);
      updateStock(btn, simulateZeroTile === btn);
    });
  });

  if (tiles[0]){
    selectTile(tiles[0]);
    updateImage(tiles[0]);
    updateCart(tiles[0]);
    updateStock(tiles[0], simulateZeroTile === tiles[0]);
  }
})();
</script>

<style>
/* --- Layout to match Figma-like banner --- */
.bp.bp--figma{
  display:grid;
  grid-template-columns: 120px minmax(0,1fr) 420px;
  gap:24px;
  align-items:start;
  padding:24px 0;
  border-top:1px solid #eee;
}
@media (max-width: 1100px){
  .bp.bp--figma{ grid-template-columns: 100px 1fr; }
  .bp-right{ grid-column: 1 / -1; }
}

/* Left thumbs */
.bp-left{}
.bp-thumbs{display:flex;flex-direction:column;gap:12px;position:sticky;top:24px}
.bp-thumb{background:#fff;border:1px solid #e5e5e5;border-radius:12px;padding:0;cursor:pointer;overflow:hidden;width:100%;aspect-ratio:1/1}
.bp-thumb__img{width:100%;height:100%;object-fit:cover;display:block}

/* Center big image */
.bp-center{}
.bp-media{position:relative;background:#f6f6f6;border-radius:16px;padding:16px;display:flex;align-items:center;justify-content:center;min-height:520px}
.bp-media__img{max-width:100%;height:auto;display:block}
.bp-media__placeholder{display:grid;place-items:center;aspect-ratio:4/3;border-radius:16px;background:#f2f2f2;color:#9a9a9a;font-size:48px}
.bp-badge{position:absolute;top:16px;left:16px;background:#fff;border:1px solid #e5e5e5;border-radius:999px;padding:6px 10px;font-size:12px;display:inline-flex;gap:6px;align-items:center}

/* Right panel */
.bp-right{padding-right:12px}
.bp-title{font-size:40px;line-height:1.1;margin:0 0 8px}
.bp-price{display:flex;align-items:baseline;gap:12px;margin:0 0 16px}
.bp-price__now{font-size:20px;font-weight:600}
.bp-price__old{font-size:16px;color:#999}

/* Color tiles (like Figma) */
.bp-swatch-block{margin:8px 0 18px}
.bp-swatch__label{font-size:14px;color:#666;margin-bottom:8px}
.bp-swatch__list{display:flex;gap:12px;flex-wrap:wrap}
.bp-tile{display:flex;flex-direction:column;gap:8px;width:120px;border:1px solid #e5e5e5;background:#fff;border-radius:12px;padding:8px;cursor:pointer}
.bp-tile.is-selected{border-color:#111;box-shadow:0 0 0 2px #1111}
.bp-tile__img-wrap{background:#f0f0f0;border-radius:10px;overflow:hidden;aspect-ratio:3/2;display:block}
.bp-tile__img{width:100%;height:100%;object-fit:cover;display:block}
.bp-tile__name{font-size:12px;color:#333;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center}

/* Stock text */
.bp-stock{min-height:1.2em;font-size:14px;margin-top:8px;color:#111}

/* CTA */
.bp-btn{display:inline-flex;align-items:center;justify-content:center;text-decoration:none;border-radius:10px;padding:14px 16px}
.bp-btn--primary{background:#111;color:#fff;width:100%;font-weight:600;margin:16px 0 10px}

/* Description */
.bp-desc{color:#666;line-height:1.6;margin:0}

/* Misc */
.bp-note{font-size:14px;color:#777;margin:10px 0}
</style>
